- hosts: localhost
  connection: local
  vars:
    package_name: softhsm
    package_version: "{{ lookup('env', 'version') }}"
    package_revision: "{{ lookup('env', 'revision') }}"
    package_arch: "{{ lookup('env', 'arch') }}"
    package_directory: /package/{{ package_name }}_{{ package_version }}-{{ package_revision}}_{{ package_arch }}
    package: "{{ package_name }}_{{ package_version }}-{{ package_revision}}_{{ package_arch }}"
    package_section: utils
    package_depends:
      - openssl (>= 1.0.0)
      - libp11-kit-dev
    package_short_description: SoftHSM is a software implementation of a generic cryptographic device with a PKCS#11 interface.
    package_long_description: |-
      OpenDNSSEC handles and stores its cryptographic keys via the PKCS#11
      interface. This interface specifies how to communicate with cryptographic
      devices such as HSM:s (Hardware Security Modules) and smart cards. The
      purpose of these devices is, among others, to generate cryptographic keys
      and sign information without revealing private-key material to the outside
      world. They are often designed to perform well on these specific tasks
      compared to ordinary processes in a normal computer.
      A potential problem with the use of the PKCS#11 interface is that it might
      limit the wide spread use of OpenDNSSEC, since a potential user might not
      be willing to invest in a new hardware device. To counter this effect,
      OpenDNSSEC is providing a software implementation of a generic
      cryptographic device with a PKCS#11 interface, the SoftHSM. SoftHSM is
      designed to meet the requirements of OpenDNSSEC, but can also work
      together with other cryptographic products because of the PKCS#11
      interface.
    maintainer_name: Ryezone Labs
    maintainer_email: info@ryezone.com

  tasks:
  - name: Create Debian Directory
    ansible.builtin.file:
      path: "{{ package_directory }}/DEBIAN"
      state: directory

  - name: Create Debian Package Control File
    ansible.builtin.template:
      src: templates/control.j2
      dest: "{{ package_directory }}/DEBIAN/control"

  - name: Create Debian Package
    ansible.builtin.command:
      argv:
        - dpkg-deb
        - --build
        - --root-owner-group
        - "{{ package }}"
      creates:  "{{ package }}.deb"
