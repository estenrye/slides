- hosts: 127.0.0.1
  connection: local
  vars_files:
    - group_vars/all.yml
  tasks:
    - name: Add chart repos
      community.kubernetes.helm_repository:
        name: "{{ item.name }}"
        repo_url: "{{ item.repo_url }}"
      loop:
        - name: tremolo
          repo_url: https://nexus.tremolo.io/repository/helm/

    # Now that the dashboard is deployed, we want to expose it and
    # enable our Okta authenticated users to authenticate to it via
    # both the web UI and kubectl.  To do this, we need an Open ID
    # connect proxy named OpenUnison.  OpenUnison and Orchestra
    # require a couple of secrets to provide authentication services
    # to the cluster.  Most of these can be automatically generated.
    # one of these secrets will need to be manually created prior to
    # executing this playbook.  Once you have provisioned the Okta
    # OIDC web application, you will need to place your OIDC token in
    # plain text at files/secrets/oidc_client_secret.
    - name: Create OpenUnison secret
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: v1
          type: Opaque
          metadata:
            name: orchestra-secrets-source
            namespace: openunison
          data:
            K8S_DB_SECRET: "{{ lookup('password', 'files/secrets/k8s_db_secret chars=ascii_letters,digits length=64') | b64encode }}"
            unisonKeystorePassword: "{{ lookup('password', 'files/secrets/unisonKeystorePassword chars=ascii_letters,digits length=256') | b64encode }}"
            OIDC_CLIENT_SECRET: "{{ lookup('password', 'files/secrets/oidc_client_secret chars=ascii_letters,digits length=8') | b64encode }}"
            grafana_oidc_client_secret: "{{ lookup('password', 'files/secrets/grafana_oidc_client_secret chars=ascii_letters,digits length=256') | b64encode }}"
          kind: Secret

    # Now that we have the secret material placed for Orchestra
    # OpenUnison, we can now install the OpenUnison Operator.
    - name: Deploy OpenUnison Operator chart inside openunison namespace (and create it)
      community.kubernetes.helm:
        name: openunison
        chart_ref: tremolo/openunison-operator
        chart_version: "{{ helm_chart_version_openunison }}"
        release_namespace: openunison
        create_namespace: true

    # Telling OpenUnison to trust authentication redirects
    # from Grafana.  Note, new trusts added after the Orchestra
    # chart is deployed will require deleting the Orchestra pod
    # to enable.
    - name: Create OpenUnison Trust for Grafana
      community.kubernetes.k8s:
        state: present
        src: files/kubernetes_manifests/openunison/{{item}}
      loop:
        - trust_grafana.yml
        - badge_grafana.yml

    # With the operator installed, we can now deploy Orchestra.
    # Orchestra will provide us with a single sign-on portal for
    # cluster resources.  Later we will configure other dashboards
    # to use openunison for authentication.
    - name: Deploy OpenUnison Operator chart inside openunison namespace (and create it)
      community.kubernetes.helm:
        name: orchestra
        chart_ref: tremolo/openunison-k8s-login-oidc
        chart_version: "{{ helm_chart_version_orchestra }}"
        release_namespace: openunison
        create_namespace: true
        values_files:
          - files/helm_values/orchestra.yml

    # now that we have openunison and orchestra installed, we now
    # need to configure the kubernetes api to trust openunison as
    # an OIDC provider.  This involves two parts:
    #  1. Downloading the OpenUnison CA certificate for upload to
    #     the controlplane nodes.
    #  2. Downloading the patch configuration to insert into the
    #     kubernetes api static manifest.
    - name: Get OpenUnison CA Certificate
      community.kubernetes.k8s_info:
        api_version: v1
        kind: Secret
        namespace: openunison
        name: ou-tls-certificate
      register: ou_ca
    - name: Get the api server config for oidc authentication
      community.kubernetes.k8s_info:
        api_version: v1
        kind: ConfigMap
        namespace: openunison
        name: api-server-config
      register: ou_api_config 
    - name: Write openunison ca certificate to localhost
      ansible.builtin.copy:
        content: '{{ ou_ca.resources[0].data["tls.crt"] | b64decode }}'
        dest: files/secrets/ou-ca.pem
    - name: Write openunison api server config to localhost
      ansible.builtin.copy:
        content: "{{ ('- ' + ou_api_config.resources[0].data['oidc-api-server-flags']) | replace('\n', '\n- ') | indent(width=4, first=true)}}"
        dest: files/secrets/ou-config.yml

    # Apply any group role bindings to enable users to authenticate
    # with the appropriate permissions.
    - name: apply group role bindings
      community.kubernetes.k8s:
        state: present
        src: "files/kubernetes_manifests/role_based_access_control/{{ item }}.yml"
      loop:
        - acl_okta_k8s_cluster_admin_dev

# Now we take a brief excursion back out to the controlplane nodes.
# Here we install the openunison CA certificate on each controlplane
# node and patch the kubernetes api configuration in to tell the
# cluster to trust openunison as an OIDC token provider.
- hosts: controlplane
  vars_files:
    - group_vars/all.yml
  tasks:
    - name: copy ou ca to controlplane
      ansible.builtin.copy:
        src: files/secrets/ou-ca.pem
        dest: /etc/kubernetes/pki/ou-ca.pem
      become: true
    - name: add oidc config to kube-apiserver manifest
      ansible.builtin.blockinfile:
        insertafter: "    - kube-apiserver"
        marker: "    # {mark}: ANSIBLE MANAGED BLOCK - OIDC FLAGS"
        path: /etc/kubernetes/manifests/kube-apiserver.yaml
        block: "{{ lookup('file', 'files/secrets/ou-config.yml') }}"
      become: true


    # - name: Deploy Linkerd chart inside linkerd namespace (and create it)
    #   community.kubernetes.helm:
    #     name: linkerd
    #     chart_ref: linkerd-stable/linkerd2
    #     chart_version: "{{ helm_chart_version_linkerd }}"
    #     release_namespace: linkerd
    #     create_namespace: true
