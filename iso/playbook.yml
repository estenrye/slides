- hosts: host_system
  connection: local
  tags:
    - clean
  tasks:
    - name: clean work/chroot folder
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - work/chroot
        - work/image
        - work/ubuntu-remix.iso

- hosts: host_system
  connection: local
  tags:
    - install_packages
  vars:
    arch: amd64
    release: focal
  tasks:
    - name: install prerequisite packages
      ansible.builtin.package:
        name:
          - syslinux
          - squashfs-tools
          - genisoimage
          - debootstrap
          - mkisofs
          - isolinux
          - memtest86+
          - coreutils

- hosts: host_system
  connection: local
  tags:
    - prepare_chroot
  vars:
    arch: amd64
    release: focal
  tasks:
    - name: create the chroot environment directory
      ansible.builtin.file:
        path: work
        state: directory

    - name: create chroot environment
      ansible.builtin.command:
        chdir: work
        argv:
          - debootstrap
          - --arch={{ arch }}
          - "{{ release }}"
          - chroot
          - https://nexus.common.ryezone.com/repository/ubuntu-{{ release }}
        creates: chroot
      become: true

    - name: mount /dev to work/chroot/dev
      ansible.posix.mount:
        src: /dev
        path: work/chroot/dev
        fstype: none
        state: present

    - name: copy system files to enable internet access in chroot
      ansible.builtin.copy:
        src: "{{ item.src }}"
        remote_src: true
        dest: "{{ item.dest }}"
      loop:
        - src: /etc/hosts
          dest: work/chroot/hosts
        - src: /etc/resolv.conf
          dest: work/chroot/resolv.conf

    - name: add sources list
      ansible.builtin.template:
        src: templates/sources.list.j2
        dest: work/chroot/etc/apt/sources.list

- hosts: chroot_environment
  connection: chroot
  tags:
    - prepare_chroot
  vars:
    ansible_host: work/chroot
  environment:
    HOME: /root
    LC_ALL: C
  tasks:
    - name: Configure mount points
      ansible.posix.mount:
        path: "{{ item.path }}"
        fstype: "{{ item.fstype }}"
        src: none
        state: mounted
      loop:
        - path: /proc
          fstype: proc
        - path: /sys
          fstype: sysfs
        - path: /dev/pts
          fstype: devpts

    - name: update apt packages
      ansible.builtin.apt:
        update_cache: true

    - name: install dbus
      ansible.builtin.package:
        name:
          - dbus

    - name: Configure machine-id and divert
      ansible.builtin.command:
        cmd: dbus-uuidgen
      register: machine_id

    - name: Write /etc/machine-id
      ansible.builtin.copy:
        content: "{{ machine_id.stdout }}"
        dest: /var/lib/dbus/machine-id
      when:
        - machine_id.changed

    - name: add dpkg diversion
      ansible.builtin.command:
        cmd: dpkg-divert --local --rename --add /sbin/initctl

    - name: link /bin/true to /sbin/initctl
      ansible.builtin.file:
        src: /bin/true
        path: /sbin/initctl
        state: link

    - name: upgrade packages
      ansible.builtin.apt:
        upgrade: true

    - name: install packages needed for live system
      ansible.builtin.package:
        name:
          - ubuntu-minimal
          - casper
          - lupin-casper
          - discover
          - laptop-detect
          - os-prober
          - linux-generic

    # - name: install grub
    #   ansible.builtin.package:
    #     name:
    #       - grub-common
    #       - grub-gfxpayload-lists
    #       - grub-pc
    #       - grub-pc-bin
    #       - grub2-common

    # - name: install network manager
    #   ansible.builtin.apt:
    #     install_recommends: false
    #     name:
    #       - network-manager

    - name: Install the graphical installer
      ansible.builtin.package:
        name:
          - ubiquity
          - ubiquity-casper
          - ubiquity-frontend-gtk
          - ubiquity-slideshow-ubuntu
          - ubiquity-ubuntu-artwork

    - name: chroot cleanup | remove files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/dbus/machine-id
        - /sbin/initctl
        - /etc/resolv.conf

    - name: chroot cleanup | remove diversion
      ansible.builtin.command:
        cmd: dpkg-divert --rename --remove /sbin/initctl

    # TODO: remove upgraded old linux kernels if more than one

    - name: clean apt cache
      ansible.builtin.command:
        cmd: apt-get clean

    - name: find all files in tmp directory
      ansible.builtin.find:
        paths:
          - /tmp
        patterns:
          - '*'
        recurse: true
      register: find_result

    - name: remove tmp files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ find_result.files }}"

    - name: unmount points
      ansible.posix.mount:
        path: "{{ item.path }}"
        state: unmounted
      loop:
        - path: /proc
        - path: /sys
        - path: /dev/pts

- hosts: host_system
  connection: local
  tags:
    - prepare_chroot
  tasks:
    - name: unmount /dev from work/chroot/dev
      ansible.posix.mount:
        path: work/chroot/dev
        state: unmounted

- hosts: host_system
  connection: local
  tags:
    - prepare_iso
  tasks:
    - name: clean work/chroot folder
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - work/image
        - work/ubuntu-remix.iso
      tags:
        - clean_image

    - name: create iso directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - work/image/casper
        - work/image/isolinux
        - work/image/install
      tags:
        - prepare_image_dirs

    - name: find vmlinuz binaries
      ansible.builtin.find:
        patterns:
          - vmlinuz-**-**-generic
        paths:
          - work/chroot/boot
        use_regex: false
        file_type: file
      register: vmlinuz
      tags:
        - prepare_vmlinuz

    - name: copy vmlinuz to image/casper
      ansible.builtin.copy:
        src: "{{ item.path }}"
        remote_src: true
        dest: work/image/casper/vmlinuz
      loop: "{{ vmlinuz.files }}"
      tags:
        - prepare_vmlinuz

    - name: Find initrd binaries
      ansible.builtin.find:
        patterns:
          - initrd.img-**-**-generic
        paths:
          - work/chroot/boot
        use_regex: false
        file_type: file
      register: initrd
      tags:
        - prepare_initrd

    - name: Copy initrd to image/casper
      ansible.builtin.copy:
        src: "{{ item.path }}"
        remote_src: true
        dest: work/image/casper/initrd.lz
      loop: "{{ initrd.files }}"
      tags:
        - prepare_initrd

    - name: Copy isolinux.bin to image/isolinux
      ansible.builtin.copy:
        src: /usr/lib/ISOLINUX/isolinux.bin
        remote_src: true
        dest: work/image/isolinux/isolinux.bin
      tags:
        - prepare_isolinux

    - name: Copy ldlinux.c32
      ansible.builtin.copy:
        src: /usr/lib/syslinux/modules/bios/ldlinux.c32
        remote_src: true
        dest: work/image/isolinux/ldlinux.c32
      tags:
        - prepare_isolinux

    - name: copy memtest86+ BIOS to image/install
      ansible.builtin.copy:
        src: /boot/memtest86+.bin
        remote_src: true
        dest: work/image/install/memtest
      tags:
        - prepare_isolinux

    - name: write isolinux files
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - src: isolinux.txt.j2
          dest: work/image/install/isolinux.txt
        - src: isolinux.cfg.j2
          dest: work/image/install/isolinux.cfg
      tags:
        - prepare_isolinux

    - name: collect manifest
      ansible.builtin.command:
        cmd: chroot work/chroot dpkg-query -W --showformat='${Package} ${Version}\n'
      register: manifest_raw
      tags:
        - filesystem_manifest

    - name: write manifest
      ansible.builtin.copy:
        content: "{{ manifest_raw.stdout }}"
        dest: "{{ item }}"
      loop:
        - work/image/casper/filesystem.manifest
        - work/image/casper/filesystem.manifest-desktop
      tags:
        - filesystem_manifest

    - name: remove lines from filesystem.manifest-desktop
      ansible.builtin.lineinfile:
        regexp: ^{{item}}
        path: work/image/casper/filesystem.manifest-desktop
        state: absent
      loop:
        - ubiquity
        - ubiquity-frontend-gtk
        - ubiquity-frontend-kde
        - casper
        - lupin-casper
        - live-initramfs
        - user-setup
        - discover1
        - xresprobe
        - os-prober
        - libdebian-installer4
      tags:
        - filesystem_manifest

    - name: compress the chroot
      ansible.builtin.command:
        cmd: mksquashfs work/chroot work/image/casper/filesystem.squashfs
      tags:
        - make_squahsfs_filesystem

    - name: get filesystem size
      ansible.builtin.command:
        cmd: du -sx --block-size=1 work/chroot
      register: filesystem_size_raw
      tags:
        - filesystem_size

    - name: cut filesystem size
      ansible.builtin.command:
        cmd: cut -f1
        stdin: "{{ filesystem_size_raw.stdout }}"
      register: filesystem_size
      tags:
        - filesystem_size

    - name: write filesystem size
      ansible.builtin.copy:
        content: "{{ filesystem_size.stdout }}"
        dest: work/image/casper/filesystem.size
      tags:
        - filesystem_size

    - name: create diskdefines
      ansible.builtin.template:
        src: templates/README.diskdefines.j2
        dest: work/image/README.diskdefines
      tags:
        - disk_defines

    - name: recognition as an ubuntu remix | image/.disk/
      ansible.builtin.file:
        path: work/image/.disk
        state: directory
      tags:
        - ubuntu_remix_recognition

    - name: recognition as an ubuntu remix | touch files
      ansible.builtin.file:
        path: "{{ item }}"
        state: touch
      loop:
        - work/image/ubuntu
        - work/image/.disk/base_installable
      tags:
        - ubuntu_remix_recognition

    - name: recognition as an ubuntu remix | write content
      ansible.builtin.copy:
        content: "{{ item.content }}"
        dest: "{{ item.path }}"
      loop:
        - path: work/image/.disk/cd_type
          content: full_cd/single
        - path: work/image/.disk/info
          content: Ubuntu Remix 20.04
        - path: work/image/.disk/release_notes_url
          content: https://github.com/estenrye/slides
      tags:
        - ubuntu_remix_recognition

    - name: find all files
      ansible.builtin.find:
        recurse: true
        file_type: file
        paths:
          - work/image
        patterns:
          - '*'
      register: image_files_for_md5
      tags:
        - calculate_md5

    - name: debug | list find result
      ansible.builtin.debug:
        var: image_files_for_md5.files.path
      tags:
        - calculate_md5

    - name: calculate md5
      ansible.builtin.command:
        chdir: work/image
        cmd: find . -type f -print0 | xargs -0 md5sum | grep -v "\./md5sum.txt" > md5sum.txt
      tags:
        - calculate_md5

    - name: create iso
      ansible.builtin.command:
        argv:
          - mkisofs
          -  -r
          -  -V
          - ubuntu-remix
          - -cache-inodes
          - -J
          - -l
          - -b
          - work/image/isolinux/isolinux.bin
          - -c
          - work/image/isolinux/boot.cat
          - -no-emul-boot
          - -boot-load-size
          - 4
          - -boot-info-table
          - -o
          - work/ubuntu-remix.iso
          - work/image
      tags:
        - create_iso
