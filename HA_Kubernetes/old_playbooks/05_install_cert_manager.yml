- hosts: 127.0.0.1
  connection: local
  vars_files:
    - group_vars/all.yml
  tasks:
    - name: Add chart repos
      community.kubernetes.helm_repository:
        name: "{{ item.name }}"
        repo_url: "{{ item.repo_url }}"
      loop:
        - name: jetstack
          repo_url: https://charts.jetstack.io

    # The acme cert-manager issuers need an issuer key to request
    # certificates using an acme account.  These tasks generate the
    # secret content for those issuers.
    - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
      community.crypto.openssl_privatekey:
        path: files/secrets/acme_issuer_key.pem
        state: present
        return_content: true
      register: acme_issuer_key
    - name: generate value file for acmeCloudflareIssuer Helm Chart
      ansible.builtin.template:
        src: templates/acme_issuer_key.yml.j2
        dest: files/secrets/acme_issuer_key.yml

    # This chart installs the cert-manager operator.
    # This operator watches the kubernetes api for Ingress objects
    # with annotations like this one:
    #     - cert-manager.io/issuer: {{ .Values.certManagerIssuer }}
    # if a matching Issuer exists, cert-manager will manage and
    # automatically rotate the certificate.
    - name: Deploy cert-manager chart inside cert-manager namespace (and create it)
      community.kubernetes.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        chart_version: "{{ helm_chart_version_cert_manager }}"
        release_namespace: cert-manager
        create_namespace: true
        values_files:
          - files/helm_values/cert-manager.yml

    # The next set of charts we deploy are the cloudflare acme
    # certificate issuers.  Currently these are deployed one
    # per namespace to at some point take advantage of the capability
    # to scope certificates generated to specific zones based on
    # the namespace name.  For example:
    #    - monitoring.dev.ryezone.com for the monitoriong database.
    # This could allow us to control allowed dns zones and give teams
    # some autonomy to define their dns names as they desire.
    # May end up consolidating this at the cluster level, as I have yet
    # to actually use that capability.
    - name: Deploy cert-manager configuration chart inside ingress namespace (and create it)
      community.kubernetes.helm:
        name: prod
        chart_ref: files/helm_charts/acmeCloudflareIssuer
        chart_version: 0.1.0
        release_namespace: "{{ item }}"
        create_namespace: true
        values_files:
          - files/secrets/acme_issuer_key.yml
        values:
          acmeUseProductionServer: true
      loop:
        - ingress
        - monitoring
        - kube-dashboard
        - openunison


###########################################################
# TODO:  Consider replacing namespaced issuer with a 
#        cluster issuer.
###########################################################

    # - name: Configure Cloudflare API Key for cert-manager
    #   community.kubernetes.k8s:
    #     state: present
    #     definition:
    #       apiVersion: v1
    #       kind: Secret
    #       metadata:
    #         name: cloudflare-api-token-secret
    #         namespace: cert-manager
    #       type: Opaque
    #       stringData:
    #         api-token: "{{ cert_manager_cloudflare_api_key }}"

    # - name: Configure LetsEncrypt Staging Issuer for cert-manager
    #   community.kubernetes.k8s:
    #     state: present
    #     definition:
    #       apiVersion: cert-manager.io/v1
    #       kind: ClusterIssuer
    #       metadata:
    #         name: letsencrypt-staging
    #         namespace: cert-manager
    #       spec:
    #         acme:
    #           email: "{{ cert_manager_cloudflare_account_email }}"
    #           server: https://acme-staging-v02.api.letsencrypt.org/directory
    #           preferredChain: "ISRG Root X1"
    #           privateKeySecretRef:
    #             name: letsencrypt-issuer-account-key
    #           solvers:
    #             - dns01:
    #                 cloudflare:
    #                   email: "{{ cert_manager_cloudflare_account_email }}"
    #                   apiKeySecretRef:
    #                     name: cloudflare-apikey-secret
    #                     key: apikey
    #               selector:
    #                 dnsZones:
    #                 - "{{ kubernetes_zone }}"
    #             - http01:
    #                 ingress:
    #                   class: nginx
    #                 selector:
    #                   matchLabels:
    #                     "use-http01-solver": "true"
