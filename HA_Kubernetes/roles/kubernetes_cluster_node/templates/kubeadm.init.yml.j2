apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
bootstrapTokens:
- description: kubeadm_bootstrap_token
  groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: {{ discovery_token }}
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
certificateKey: {{ certificate_key }}
localAPIEndpoint:
  advertiseAddress: {{ kubernetes_advertise_address }}
  bindPort: {{ kubernetes_bind_port }}
nodeRegistration:
  criSocket: /var/run/crio/crio.sock
  name: {{ kubernetes_node_name }}
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
  kubeletExtraArgs:
    cgroup-driver: "cgroupfs"
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
apiServer:
  timeoutForControlPlane: 4m0s
certificatesDir: /etc/kubernetes/pki
certSANs:
  - {{ kubernetes_control_plane_endpoint_vip }}
{% for node in lookup('inventory_hostnames', 'controlplane:*').split(',') %}
{% set node_fqdn = node + "." + kubernetes_zone -%}
{% set node_ip = lookup('dig', node_fqdn, 'qtype=A')%}
  - {{ node }}
  - {{ node_fqdn }}
  - {{ node_ip }}
{% endfor%}
clusterName: kubernetes
controlPlaneEndpoint: "{{ kubernetes_control_plane_endpoint_address }}:{{ kubernetes_control_plane_endpoint_port }}"
controllerManager: {}
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
imageRepository: k8s.gcr.io
kubernetesVersion: {{ kubernetes_version }}
networking:
  dnsDomain: cluster.local
  podSubnet: {{ kubernetes_pod_subnet }}
  serviceSubnet: {{ kubernetes_service_subnet }}
scheduler: {}
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
metricsBindAddress: "0.0.0.0:10249"