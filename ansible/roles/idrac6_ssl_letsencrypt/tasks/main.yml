- name: Get Current SSL Certificate Information
  ansible.builtin.command:
    argv:
      - racadm
      - -r
      - "{{ idrac.name }}"
      - -u
      - "{{ idrac.ansible_ssh_user }}"
      - -p
      - "{{ idrac.ansible_ssh_password }}"
      - sslcertview
      - -t
      - 1
      - -A
  register: ssl_cert_info
  changed_when: false

- name: DEBUG | ssl_cert_info
  ansible.builtin.debug:
    var: ssl_cert_info

- name: Set Facts
  ansible.builtin.set_fact:
    ssl_cert_info_lines: '{{ ssl_cert_info.stdout_lines }}'
    num_lines: '{{ ssl_cert_info.stdout_lines | length | int }}'

- name: Set Certificate Facts
  ansible.builtin.set_fact:
    ssl_cert_common_name: '{{ ssl_cert_info_lines[num_lines|int-4] }}'
    ssl_cert_certificate_authority: '{{ ssl_cert_info_lines[num_lines|int-3] }}'
    ssl_cert_not_before: '{{ ssl_cert_info_lines[num_lines|int-2] }}'
    ssl_cert_not_after: '{{ ssl_cert_info_lines[num_lines|int-1] }}'

- name: DEBUG | ssl_cert_info | CN
  ansible.builtin.debug:
    var: ssl_cert_common_name

- name: DEBUG | ssl_cert_info | CA
  ansible.builtin.debug:
    var: ssl_cert_certificate_authority

- name: DEBUG | ssl_cert_info | not_before
  ansible.builtin.debug:
    var: ssl_cert_not_before

- name: DEBUG | ssl_cert_info | not_after
  ansible.builtin.debug:
    var: ssl_cert_not_after

- name: Create folder to store everything
  file:
    path: /tmp/letsencrypt
    state: directory
    mode: 0700

- name: Write acme account key
  ansible.builtin.copy:
    dest: /tmp/letsencrypt/letsencrypt.pem
    content: "{{ acme_account_key }}"

- name: Create Domain Private Key
  openssl_privatekey:
    path: /tmp/letsencrypt/{{ domain_name }}.pem

- name: Create Certificate Signing Request
  openssl_csr:
    path: /tmp/letsencrypt/{{ domain_name }}.csr
    privatekey_path: /tmp/letsencrypt/{{ domain_name }}.pem
    common_name: '{{ domain_name }}'
    subject_alt_name: "{{ item.value | map('regex_replace', '^', 'DNS:') | list }}"
  with_dict:
    dns_server:
    - '{{ domain_name }}'
    # - '*.{{ domain_name }}'

- name: Create ACME Challenge
  acme_certificate:
    account_key_src: /tmp/letsencrypt/letsencrypt.pem
    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory
    acme_version: 2
    challenge: dns-01
    csr: /tmp/letsencrypt/{{ domain_name }}.csr
    fullchain_dest: /tmp/letsencrypt/{{ domain_name }}.fullchain.pem
    terms_agreed: yes
  register: le_challenge

- name: Update DNS record
  cloudflare_dns:
    api_token: '{{ cloudflare_account_api_token }}'
    zone: '{{ cloudflare_zone }}'
    record: "{{ item['value']['dns-01']['resource'] }}"
    type: TXT
    value: "{{ item['value']['dns-01']['resource_value'] }}"
  when: le_challenge is changed
  with_dict: "{{ le_challenge['challenge_data'] }}"

- name: Wait a bit to let DNS update
  wait_for:
    timeout: 5
  when: le_challenge is changed

- name: Validate ACME Challenge
  acme_certificate:
    account_key_src: /tmp/letsencrypt/letsencrypt.pem
    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory
    acme_version: 2
    challenge: dns-01
    csr: /tmp/letsencrypt/{{ domain_name }}.csr
    data: '{{ le_challenge }}'
    fullchain_dest: /tmp/letsencrypt/{{ domain_name }}.fullchain.pem
    terms_agreed: yes
  when: le_challenge is changed

- name: Remove TXT record after validating
  cloudflare_dns:
    api_token: '{{ cloudflare_account_api_token }}'
    zone: '{{ cloudflare_zone }}'
    record: "{{ item['value']['dns-01']['resource'] }}"
    type: TXT
    value: "{{ item['value']['dns-01']['resource_value'] }}"
    state: absent
  when: le_challenge is changed
  with_dict: "{{ le_challenge['challenge_data'] }}"
