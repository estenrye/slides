- name: Create tftp Group if it does not exist
  ansible.builtin.group:
    gid: "{{ tftp_gid | int }}"
    name: "{{ tftp_group }}"
  become: true

- name: Create tftp User if it does not exist
  ansible.builtin.user:
    uid: "{{ tftp_uid | int }}"
    name: "{{ tftp_user }}"
    group: "{{ tftp_group }}"
  become: true

- name: create tftp directories
  ansible.builtin.file:
    state: directory
    path: "{{ tftp_dir }}"
    owner: "{{ tftp_user }}"
    group: "{{ tftp_group }}"
    mode: 0755
  become: true
  loop_control:
    loop_var: tftp_dir
  loop:
    - "{{ tftp_directory }}"
    - "{{ tftp_directory }}/firmware"
    - "{{ tftp_directory }}/boot"
    - "{{ tftp_directory }}/boot/bios"
    - "{{ tftp_directory }}/boot/efi64"
    - "{{ image_mirror_dir }}"
    - "{{ image_mirror_dir }}/bin"
    - "{{ image_mirror_dir }}/status"

- name: create image mirror directories
  ansible.builtin.file:
    state: directory
    path: "{{ image_mirror_dir }}/{{ tftp_dir.name }}"
    owner: "{{ tftp_user }}"
    group: "{{ tftp_group }}"
    mode: 0755
  become: true
  loop_control:
    loop_var: tftp_dir
    label: "{{ tftp_dir.name }} ==> {{ image_mirror_dir }}/{{ tftp_dir.name }}"
  loop: "{{ image_mirrors }}"

- name: create image status directories
  ansible.builtin.file:
    state: directory
    path: "{{ image_mirror_dir }}/status/{{ tftp_dir.name }}"
    owner: "{{ tftp_user }}"
    group: "{{ tftp_group }}"
    mode: 0755
  become: true
  loop_control:
    loop_var: tftp_dir
    label: "{{ tftp_dir.name }} ==> {{ image_mirror_dir }}/status/{{ tftp_dir.name }}"
  loop: "{{ image_mirrors }}"

- name: Install tftp-hpa package
  ansible.builtin.package:
    name:
      - casper
      - tftp-hpa
      - tftpd-hpa
      - pxelinux
      - rsync
  become: true

- name: Copy pxelinux
  ansible.builtin.synchronize:
    src: "{{ pxelinux_file.src }}"
    dest: "{{ pxelinux_file.dest }}"
    owner: false
    group: false
  become: true
  delegate_to: "{{ inventory_hostname }}"
  loop_control:
    loop_var: pxelinux_file
  loop:
    - src: /usr/lib/PXELINUX/
      dest: "{{ tftp_directory }}/boot/bios"
    - src: /usr/lib/PXELINUX/
      dest: "{{ tftp_directory }}/boot/efi64"
    - src: /usr/lib/syslinux/modules/bios/
      dest: "{{ tftp_directory }}/boot/bios"
    - src: /usr/lib/syslinux/modules/efi64/
      dest: "{{ tftp_directory }}/boot/efi64"

- name: Copy kernel image
  ansible.builtin.copy:
    src: "{{ kernel_file.src }}"
    dest: "{{ kernel_file.dest }}"
    owner: "{{ tftp_user }}"
    group: "{{ tftp_group }}"
  become: true
  loop_control:
    loop_var: kernel_file
  loop:
    - src: vmlinuz
      dest: "{{ tftp_directory }}/boot/bios/vmlinuz"
    - src: vmlinuz
      dest: "{{ tftp_directory }}/boot/efi64/vmlinuz"
    - src: initrd
      dest: "{{ tftp_directory }}/boot/bios/initrd"
    - src: initrd
      dest: "{{ tftp_directory }}/boot/efi64/initrd"

- name: Create Configuration Files
  ansible.builtin.template:
    src: tftpd-hpa.conf.j2
    dest: /etc/default/tftpd-hpa
  notify: restart tftpd-hpa
  become: true

- name: Ensure keepalived is enabled on boot.
  ansible.builtin.service:
    name: tftpd-hpa
    enabled: yes
  become: true

- name: Ensure keepalived is started.
  ansible.builtin.service:
    name: tftpd-hpa
    state: started
  become: true

- name: Download IPXE firmware
  ansible.builtin.get_url:
    url: "{{ ipxe_firmware.src }}"
    dest: "{{ ipxe_firmware.dest }}"
    owner: "{{ tftp_user }}"
    group: "{{ tftp_group }}"
  become: true
  loop_control:
    loop_var: ipxe_firmware
  loop:
    - src: http://boot.ipxe.org/undionly.kpxe
      dest: "{{ tftp_directory }}/firmware/undionly.kpxe"
    - src: http://boot.ipxe.org/ipxe.efi
      dest: "{{ tftp_directory }}/firmware/ipxe.efi"

- name: copy shoelaces IPXE firmware
  ansible.builtin.copy:
    src: undionly.shoelaces.kpxe
    dest: "{{ tftp_directory }}/firmware/undionly.shoelaces.kpxe"
    owner: "{{ tftp_user }}"
    group: "{{ tftp_group }}"
  become: true

- name: copy image mirror scripts
  ansible.builtin.template:
    src: templates/imagemirror.{{ image_mirror.name }}.sh.j2
    dest: "{{ image_mirror_dir }}/bin/imagemirror.{{ image_mirror.name }}.sh"
    owner: root
    group: root
    mode: 0755
  become: true
  loop_control:
    loop_var: image_mirror
    label: "{{ image_mirror.name }} ==> {{ image_mirror_dir }}/bin/imagemirror.{{ image_mirror.name }}.sh"
  loop: "{{ image_mirrors }}"

- name: copy status update script
  ansible.builtin.template:
    src: templates/update-status.sh.j2
    dest: "{{ image_mirror_dir }}/bin/update-status.sh"
    owner: root
    group: root
    mode: 0755
  become: true

- name: Install SystemD Update Service
  ansible.builtin.template:
    src: imagemirror.update.service.j2
    dest: /lib/systemd/system/imagemirror.{{ image_mirror.name }}.update.service
    mode: 0644
  become: true
  notify: systemd daemon reload
  loop_control:
    loop_var: image_mirror
    label: "{{ image_mirror.name }} ==> /lib/systemd/system/imagemirror.{{ image_mirror.name }}.update.service"
  loop: "{{ image_mirrors }}"

- name: Install SystemD Update Timer
  ansible.builtin.template:
    src: imagemirror.update.timer.j2
    dest: /lib/systemd/system/imagemirror.{{ image_mirror.name }}.update.timer
    mode: 0644
  become: true
  notify: systemd daemon reload
  loop_control:
    loop_var: image_mirror
    label: "{{ image_mirror.name }} ==> /lib/systemd/system/imagemirror.{{ image_mirror.name }}.update.timer"
  loop: "{{ image_mirrors }}"

- name: Flush handlers
  meta: flush_handlers

- name: Enable and Start debmirror Timer
  ansible.builtin.systemd:
    name: imagemirror.{{ image_mirror.name }}.update.timer
    state: started
    enabled: true
  become: true
  loop_control:
    loop_var: image_mirror
    label: "{{ image_mirror.name }}"
  loop: "{{ image_mirrors }}"
