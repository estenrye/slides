- name: create gnupg directory
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0700
    owner: root
    group: root
  loop:
    - /gnupg
    - /gpg

- name: create gpg key directory
  ansible.builtin.file:
    path: "/gpg/{{ aptmirror.mirror.name }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  loop_control:
    loop_var: aptmirror
    label: "{{ aptmirror.mirror.name }}"
  loop: "{{ gpg_archive_repos }}"
  when:
    - aptmirror.remote.gpg_key_archive is defined

- name: create gpg_archive key directory
  ansible.builtin.file:
    path: "/gpg_archive/{{ aptmirror.mirror.name }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  loop_control:
    loop_var: aptmirror
    label: "{{ aptmirror.mirror.name }}"
  loop: "{{ gpg_archive_repos }}"
  when:
    - aptmirror.remote.gpg_key_archive is defined

- name: Download gpg key archives
  ansible.builtin.get_url:
    url: "{{ aptmirror.remote.gpg_key_archive.url }}"
    dest: "/gpg_archive/{{ aptmirror.mirror.name }}/{{ aptmirror.remote.gpg_key_archive.url | basename }}"
    mode: 0444
    owner: root
    group: root
  loop_control:
    loop_var: aptmirror
    label: "{{ aptmirror.mirror.name }}"
  loop: "{{ gpg_archive_repos }}"
  when:
    - aptmirror.remote.gpg_key_archive is defined
  register: key_download

- name: expand key archive files
  ansible.builtin.unarchive:
    src: "/gpg_archive/{{ aptmirror.mirror.name }}/{{ aptmirror.remote.gpg_key_archive.url | basename }}"
    remote_src: true
    dest: "/gpg_archive/{{ aptmirror.mirror.name }}"
    owner: root
    group: root
  loop_control:
    loop_var: aptmirror
    label: "{{ aptmirror.mirror.name }}"
  loop: "{{ gpg_archive_repos }}"
  when:
    - aptmirror.remote.gpg_key_archive is defined

- name: make keyring
  community.general.make:
    chdir: "/gpg_archive/{{ aptmirror.mirror.name }}/{{ aptmirror.remote.gpg_key_archive.make_chdir }}"
    target: "{{ aptmirror.remote.gpg_key_archive.make_target }}"
  loop_control:
    loop_var: aptmirror
    label: "{{ aptmirror.mirror.name }}"
  loop: "{{ gpg_archive_repos }}"
  when:
    - aptmirror.remote.gpg_key_archive is defined
    - aptmirror.remote.gpg_key_archive.make_chdir is defined
    - aptmirror.remote.gpg_key_archive.make_target is defined

- name: display keys
  ansible.builtin.debug:
    msg: "{{ lookup('template', 'gpg-key-import-list.j2' ) }}"

- name: import trusted keys
  ansible.builtin.include_tasks:
    file: import_key.yml
  loop_control:
    loop_var: repo
    label: "{{ repo.mirror.name }}"
  loop: "{{ gpg_archive_repos }}"

- name: Set Permissions on .gnupg
  ansible.builtin.file:
    state: directory
    path: /gnupg
    owner: root
    group: root
    mode: 0700

- name: Set Permissions on .gnupg/*
  ansible.builtin.file:
    state: file
    path: /gnupg/{{ gpg_file }}
    owner: root
    group: root
    mode: 0600
  loop_control:
    loop_var: gpg_file
  loop:
    - trustedkeys.gpg
    - trustdb.gpg
